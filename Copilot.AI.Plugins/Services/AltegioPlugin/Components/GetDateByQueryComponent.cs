using System.Collections;
using System.Text.RegularExpressions;
using Copilot.AI.Plugins.Interfaces.PluginServices.AltegioPlugin;
using Copilot.Ai.Utils.Interfaces;
using Microsoft.Extensions.Logging;

namespace Copilot.AI.Plugins.Services.AltegioPlugin.Components;

/// <summary>
/// Represents a component that retrieves a date value based on a user query.
/// </summary>
public class GetDateByQueryComponent : IAltegioComponent
{
    private readonly ILogger<GetDateByQueryComponent> _logger;
    private readonly IGptTextEmitter _gptTextEmitter;
    public Type ResultType { get; } = typeof(DateTimeOffset);

    public static readonly string ConversationParameterKey = "conversation";
    public static readonly string QueryParameterKey = "query";
    public static readonly string TimezoneParameterKey = "timezone";

    private const string NowKeyWord = "now";

    public GetDateByQueryComponent(
        ILogger<GetDateByQueryComponent> logger,
        IGptTextEmitter gptTextEmitter)
    {
        _logger = logger;
        _gptTextEmitter = gptTextEmitter;
    }

    /// <summary>
    /// Executes the GetDateByQueryComponent.
    /// </summary>
    /// <param name="hashtable">The hashtable containing the required parameters.</param>
    /// <returns>A task that represents the asynchronous operation.</returns>
    /// <exception cref="ArgumentException">Thrown when either the kernel or query parameter is missing.</exception>
    public async Task<AltegioComponentResult> InvokeAsync(Hashtable hashtable)
    {
        var query = hashtable.GetValueOrThrow<string>(QueryParameterKey);
        var timezone = hashtable.GetValueOrThrow<int>(TimezoneParameterKey);
        var offset = TimeSpan.FromHours(timezone);

        var format = "yyyyMMdd HH:mm";
        var dateNow = DateTimeOffset.UtcNow.ToOffset(offset).ToString(format);

        if (query.Equals(NowKeyWord, StringComparison.CurrentCultureIgnoreCase))
            return new AltegioComponentResult
            {
                IsSuccess = true,
                Result = dateNow,
            };

        var prompt =
            $"""

             Given user's query and current datetime, complete the following task and output answer "{format}" date format.
             Generate a date query in the format "{format}" from a user request.

             Examples:
             current datetime: "20240209 12:00"
             query: "today at 9"
             output: "20240209 21:00"

             current datetime: "20240209 12:00"
             query: "tomorrow at 12"
             output: "20240210 12:00"

             current datetime: "20240209 12:00"
             query: "12 of february at 12"
             output: "20240212 12:00"

             current datetime: "20240209 12:00"
             query: "2024-02-14T12:00:00+06:00"
             output: "20240214 12:00"

             Your turn:
             current datetime: "{dateNow}"
             query: "{query}"
             output:

             """;

        try
        {
            var response = await Emmit(prompt);

            var regex = new Regex(@"(\d{8}\s\d{2}:\d{2})");

            var match = regex.Match(response);
            if (match.Success)
            {
                var dateTime = match.Groups[1].Value;

                var result = DateTimeOffset
                    .ParseExact(dateTime, format, null);

                return new AltegioComponentResult
                {
                    IsSuccess = true,
                    Result = result,
                };
            }
        }
        catch (Exception e)
        {
            _logger.LogError("Error while parsing date");
        }

        return new AltegioComponentResult
        {
            IsSuccess = false,
            ErrorMessage = $"Cannot understand date \"{query}\". Provide more specific date and time."
        };
    }

    /// <summary>
    /// Executes the Emmit method to get the response from the chat completion service.
    /// </summary>
    /// <param name="prompt">The prompt for the chat completion service.</param>
    /// <returns>The response generated by the chat completion service.</returns>
    private async Task<string> Emmit(string prompt)
    {
        var gptModel = "gpt-4-1106-preview";

        var result = await _gptTextEmitter.Emmit(
            prompt: prompt,
            gptModel: gptModel,
            temperature: .1,
            maxTokens: 100);

        return result.MessageContent;
    }
}